#!/usr/bin/env bash
#
# cirya Bash Completion
# =======================
#
# Bash completion support for the `cirya` command,
# generated by [picocli](http://picocli.info/) version 3.1.0.
#
# Installation
# ------------
#
# 1. Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# 2. Open a new bash console, and type `cirya [TAB][TAB]`
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'cirya (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [5] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
#

# Enable programmable completion facilities (see [3])
shopt -s progcomp

# ArrContains takes two arguments, both of which are the name of arrays.
# It creates a temporary hash from lArr1 and then checks if all elements of lArr2
# are in the hashtable.
#
# Returns zero (no error) if all elements of the 2nd array are in the 1st array,
# otherwise returns 1 (error).
#
# Modified from [4]
function ArrContains() {
  local lArr1 lArr2
  declare -A tmp
  eval lArr1=("\"\${$1[@]}\"")
  eval lArr2=("\"\${$2[@]}\"")
  for i in "${lArr1[@]}";{ [ -n "$i" ] && ((++tmp[$i]));}
  for i in "${lArr2[@]}";{ [ -n "$i" ] && [ -z "${tmp[$i]}" ] && return 1;}
  return 0
}

# Bash completion entry point function.
# _complete_cirya finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_cirya() {
  CMDS0=(help)
  CMDS1=(launch)
  CMDS2=(ps)
  CMDS3=(psa)
  CMDS4=(inspect)
  CMDS5=(rm)
  CMDS6=(rma)
  CMDS7=(execute)
  CMDS8=(ssh-info)
  CMDS9=(ssh)
  CMDS10=(scp)
  CMDS11=(port-map)
  CMDS12=(start)
  CMDS13=(stop)
  CMDS14=(abort)
  CMDS15=(restart)
  CMDS16=(reconfigure)
  CMDS17=(reinstall)
  CMDS18=(repair)
  CMDS19=(images)
  CMDS20=(aql)
  CMDS21=(asadm)
  CMDS22=(asinfo)
  CMDS23=(roster-set)
  CMDS24=(roster-get)
  CMDS25=(init)
  CMDS26=(image-register)
  CMDS27=(rmp)
  CMDS28=(group-inspect)
  CMDS29=(server-inspect)
  CMDS30=(server-start)
  CMDS31=(server-stop)
  CMDS32=(link-break)
  CMDS33=(link-heal)
  CMDS34=(partition)
  CMDS35=(partition-heal)
  CMDS36=(port-block)
  CMDS37=(port-heal)
  CMDS38=(skew-apply)
  CMDS39=(skew-heal)
  CMDS40=(skew-inspect)

  ArrContains COMP_WORDS CMDS40 && { _picocli_cirya_skewinspect; return $?; }
  ArrContains COMP_WORDS CMDS39 && { _picocli_cirya_skewheal; return $?; }
  ArrContains COMP_WORDS CMDS38 && { _picocli_cirya_skewapply; return $?; }
  ArrContains COMP_WORDS CMDS37 && { _picocli_cirya_portheal; return $?; }
  ArrContains COMP_WORDS CMDS36 && { _picocli_cirya_portblock; return $?; }
  ArrContains COMP_WORDS CMDS35 && { _picocli_cirya_partitionheal; return $?; }
  ArrContains COMP_WORDS CMDS34 && { _picocli_cirya_partition; return $?; }
  ArrContains COMP_WORDS CMDS33 && { _picocli_cirya_linkheal; return $?; }
  ArrContains COMP_WORDS CMDS32 && { _picocli_cirya_linkbreak; return $?; }
  ArrContains COMP_WORDS CMDS31 && { _picocli_cirya_serverstop; return $?; }
  ArrContains COMP_WORDS CMDS30 && { _picocli_cirya_serverstart; return $?; }
  ArrContains COMP_WORDS CMDS29 && { _picocli_cirya_serverinspect; return $?; }
  ArrContains COMP_WORDS CMDS28 && { _picocli_cirya_groupinspect; return $?; }
  ArrContains COMP_WORDS CMDS27 && { _picocli_cirya_rmp; return $?; }
  ArrContains COMP_WORDS CMDS26 && { _picocli_cirya_imageregister; return $?; }
  ArrContains COMP_WORDS CMDS25 && { _picocli_cirya_init; return $?; }
  ArrContains COMP_WORDS CMDS24 && { _picocli_cirya_rosterget; return $?; }
  ArrContains COMP_WORDS CMDS23 && { _picocli_cirya_rosterset; return $?; }
  ArrContains COMP_WORDS CMDS22 && { _picocli_cirya_asinfo; return $?; }
  ArrContains COMP_WORDS CMDS21 && { _picocli_cirya_asadm; return $?; }
  ArrContains COMP_WORDS CMDS20 && { _picocli_cirya_aql; return $?; }
  ArrContains COMP_WORDS CMDS19 && { _picocli_cirya_images; return $?; }
  ArrContains COMP_WORDS CMDS18 && { _picocli_cirya_repair; return $?; }
  ArrContains COMP_WORDS CMDS17 && { _picocli_cirya_reinstall; return $?; }
  ArrContains COMP_WORDS CMDS16 && { _picocli_cirya_reconfigure; return $?; }
  ArrContains COMP_WORDS CMDS15 && { _picocli_cirya_restart; return $?; }
  ArrContains COMP_WORDS CMDS14 && { _picocli_cirya_abort; return $?; }
  ArrContains COMP_WORDS CMDS13 && { _picocli_cirya_stop; return $?; }
  ArrContains COMP_WORDS CMDS12 && { _picocli_cirya_start; return $?; }
  ArrContains COMP_WORDS CMDS11 && { _picocli_cirya_portmap; return $?; }
  ArrContains COMP_WORDS CMDS10 && { _picocli_cirya_scp; return $?; }
  ArrContains COMP_WORDS CMDS9 && { _picocli_cirya_ssh; return $?; }
  ArrContains COMP_WORDS CMDS8 && { _picocli_cirya_sshinfo; return $?; }
  ArrContains COMP_WORDS CMDS7 && { _picocli_cirya_execute; return $?; }
  ArrContains COMP_WORDS CMDS6 && { _picocli_cirya_rma; return $?; }
  ArrContains COMP_WORDS CMDS5 && { _picocli_cirya_rm; return $?; }
  ArrContains COMP_WORDS CMDS4 && { _picocli_cirya_inspect; return $?; }
  ArrContains COMP_WORDS CMDS3 && { _picocli_cirya_psa; return $?; }
  ArrContains COMP_WORDS CMDS2 && { _picocli_cirya_ps; return $?; }
  ArrContains COMP_WORDS CMDS1 && { _picocli_cirya_launch; return $?; }
  ArrContains COMP_WORDS CMDS0 && { _picocli_cirya_help; return $?; }

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_cirya; return $?;
}

# Generates completions for the options and subcommands of the `cirya` command.
function _picocli_cirya() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS="help launch ps psa inspect rm rma execute ssh-info ssh scp port-map start stop abort restart reconfigure reinstall repair images aql asadm asinfo roster-set roster-get init image-register rmp group-inspect server-inspect server-start server-stop link-break link-heal partition partition-heal port-block port-heal skew-apply skew-heal skew-inspect"
  FLAG_OPTS="-h --help"
  ARG_OPTS="-c --cluster -f --file -w --working-dir -p --server-port"

  case ${CURR_WORD} in
    -f|--file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "" ) ) # files
      return $?
      ;;
    *)
      case ${PREV_WORD} in
        -f|--file)
          compopt -o filenames
          COMPREPLY=( $( compgen -f -- $CURR_WORD ) ) # files
          return $?
          ;;
      esac
  esac

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_cirya_help() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="-h --help"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `launch` subcommand.
function _picocli_cirya_launch() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `ps` subcommand.
function _picocli_cirya_ps() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--group -g"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `psa` subcommand.
function _picocli_cirya_psa() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--group -g"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `inspect` subcommand.
function _picocli_cirya_inspect() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_cirya_rm() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `rma` subcommand.
function _picocli_cirya_rma() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `execute` subcommand.
function _picocli_cirya_execute() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `ssh-info` subcommand.
function _picocli_cirya_sshinfo() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a --show-secret -s"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `ssh` subcommand.
function _picocli_cirya_ssh() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `scp` subcommand.
function _picocli_cirya_scp() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="-r -C"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `port-map` subcommand.
function _picocli_cirya_portmap() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS="--port -p"

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_cirya_start() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `stop` subcommand.
function _picocli_cirya_stop() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `abort` subcommand.
function _picocli_cirya_abort() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `restart` subcommand.
function _picocli_cirya_restart() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `reconfigure` subcommand.
function _picocli_cirya_reconfigure() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `reinstall` subcommand.
function _picocli_cirya_reinstall() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS="--archive -b"

  case ${CURR_WORD} in
    --archive|-b)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "" ) ) # files
      return $?
      ;;
    *)
      case ${PREV_WORD} in
        --archive|-b)
          compopt -o filenames
          COMPREPLY=( $( compgen -f -- $CURR_WORD ) ) # files
          return $?
          ;;
      esac
  esac

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `repair` subcommand.
function _picocli_cirya_repair() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `images` subcommand.
function _picocli_cirya_images() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `aql` subcommand.
function _picocli_cirya_aql() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `asadm` subcommand.
function _picocli_cirya_asadm() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `asinfo` subcommand.
function _picocli_cirya_asinfo() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `roster-set` subcommand.
function _picocli_cirya_rosterset() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS="--namespace -n"

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `roster-get` subcommand.
function _picocli_cirya_rosterget() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS="--namespace -n"

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `init` subcommand.
function _picocli_cirya_init() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `image-register` subcommand.
function _picocli_cirya_imageregister() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS="--dockerfile -f --context-dir -c --name -n --version -v"

  case ${CURR_WORD} in
    --dockerfile|-f)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "" ) ) # files
      return $?
      ;;
    --context-dir|-c)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "" ) ) # files
      return $?
      ;;
    *)
      case ${PREV_WORD} in
        --dockerfile|-f)
          compopt -o filenames
          COMPREPLY=( $( compgen -f -- $CURR_WORD ) ) # files
          return $?
          ;;
        --context-dir|-c)
          compopt -o filenames
          COMPREPLY=( $( compgen -f -- $CURR_WORD ) ) # files
          return $?
          ;;
      esac
  esac

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `rmp` subcommand.
function _picocli_cirya_rmp() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `group-inspect` subcommand.
function _picocli_cirya_groupinspect() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `server-inspect` subcommand.
function _picocli_cirya_serverinspect() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `server-start` subcommand.
function _picocli_cirya_serverstart() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `server-stop` subcommand.
function _picocli_cirya_serverstop() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `link-break` subcommand.
function _picocli_cirya_linkbreak() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS="-s --src -d --dest"

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `link-heal` subcommand.
function _picocli_cirya_linkheal() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS="-s --src -d --dest"

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `partition` subcommand.
function _picocli_cirya_partition() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--randomize -r"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `partition-heal` subcommand.
function _picocli_cirya_partitionheal() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS=""
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `port-block` subcommand.
function _picocli_cirya_portblock() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS="--port -p"

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `port-heal` subcommand.
function _picocli_cirya_portheal() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS="--port -p"

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `skew-apply` subcommand.
function _picocli_cirya_skewapply() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a --uniform -u"
  ARG_OPTS="--skew -s --interval -i"

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `skew-heal` subcommand.
function _picocli_cirya_skewheal() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Generates completions for the options and subcommands of the `skew-inspect` subcommand.
function _picocli_cirya_skewinspect() {
  # Get completion data
  CURR_WORD=${COMP_WORDS[COMP_CWORD]}
  PREV_WORD=${COMP_WORDS[COMP_CWORD-1]}

  COMMANDS=""
  FLAG_OPTS="--all -a"
  ARG_OPTS=""

  COMPREPLY=( $(compgen -W "${FLAG_OPTS} ${ARG_OPTS} ${COMMANDS}" -- ${CURR_WORD}) )
}

# Define a completion specification (a compspec) for the
# `cirya`, `cirya.sh`, and `cirya.bash` commands.
# Uses the bash `complete` builtin (see [5]) to specify that shell function
# `_complete_cirya` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_cirya -o default cirya cirya.sh cirya.bash
