{
  "swagger" : "2.0",
  "info" : {
    "version" : "v1",
    "title" : "Cirya REST v1"
  },
  "basePath" : "/rest/v1",
  "tags" : [ {
    "name" : "aerospike",
    "description" : "Aerospike specific operations for set of nodes."
  }, {
    "name" : "cluster",
    "description" : "Operations on clusters."
  }, {
    "name" : "container-group",
    "description" : "Operations on container groups."
  }, {
    "name" : "fault",
    "description" : "Apply fault to the cluster to create failure scenarios."
  }, {
    "name" : "infrastructure",
    "description" : "Operations on core infrastructure."
  }, {
    "name" : "node",
    "description" : "Operations on nodes."
  }, {
    "name" : "server",
    "description" : "Operations on the Cirya server."
  }, {
    "name" : "session",
    "description" : "Manages cirya sessions. A cirya session is associated with a cirya configuration file."
  } ],
  "schemes" : [ "http" ],
  "paths" : {
    "/aerospike/asinfo" : {
      "get" : {
        "tags" : [ "aerospike" ],
        "description" : "Get asinfo for give nodes.",
        "operationId" : "asinfo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodesIds",
          "in" : "query",
          "description" : "the input node-ids",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "timeoutMillis",
          "in" : "query",
          "description" : "the timeout in millis for getting info from a node.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "names",
          "in" : "query",
          "description" : "the names of aerospike info items.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/aerospike/nodeIds" : {
      "get" : {
        "tags" : [ "aerospike" ],
        "description" : "Get aerospike node-ids for give nodes.",
        "operationId" : "nodeIdsFromAerospikeIds",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "query",
          "description" : "the cluster the nodes belong to.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "aerospikeIds",
          "in" : "query",
          "description" : "the input aerospike node-ids",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "timeoutMillis",
          "in" : "query",
          "description" : "the timeout in millis on getting node-id for a node.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/aerospike/asinfo/raw" : {
      "get" : {
        "tags" : [ "aerospike" ],
        "description" : "Get asinfo raw output as is from the server for give nodes.",
        "operationId" : "asinfoRaw",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodesIds",
          "in" : "query",
          "description" : "the input node-ids",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "timeoutMillis",
          "in" : "query",
          "description" : "the timeout in millis for getting info from a node.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "names",
          "in" : "query",
          "description" : "the names of aerospike info items.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/aerospike/aerospike-nodeIds" : {
      "get" : {
        "tags" : [ "aerospike" ],
        "description" : "Get aerospike node-ids for give nodes.",
        "operationId" : "aerospikeNodeIds",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodesIds",
          "in" : "query",
          "description" : "the input node-ids",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "timeoutMillis",
          "in" : "query",
          "description" : "the timeout in millis on getting aerospike node-id for a node.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/aerospike/asinfo-optimistic" : {
      "get" : {
        "tags" : [ "aerospike" ],
        "description" : "Get asinfo for give nodes but do not fail on unreachable nodes.",
        "operationId" : "asinfoOptimistic",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodesIds",
          "in" : "query",
          "description" : "the input node-ids",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "timeoutMillis",
          "in" : "query",
          "description" : "the timeout in millis for getting info from a node.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "names",
          "in" : "query",
          "description" : "the names of aerospike info items.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/aerospike/asinfo-optimistic/raw" : {
      "get" : {
        "tags" : [ "aerospike" ],
        "description" : "Get asinfo raw output as is from server for give nodes but do not fail\non\nunreachable\nnodes.",
        "operationId" : "asinfoRawOptimistic",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodesIds",
          "in" : "query",
          "description" : "the input node-ids",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "timeoutMillis",
          "in" : "query",
          "description" : "the timeout in millis for getting info from a node.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "names",
          "in" : "query",
          "description" : "the names of aerospike info items.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/aerospike/cluster/{clusterId}/namespaces/{namespace}/roster" : {
      "get" : {
        "tags" : [ "aerospike" ],
        "description" : "Get the roster for a namespace.",
        "operationId" : "rosterGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster to get the roster for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "the namespace to get roster for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "timeout",
          "in" : "query",
          "description" : "the timeout in millis for getting the roster.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "aerospike" ],
        "description" : "Set the roster to input nodes for a namespace.",
        "operationId" : "rosterSet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster to set the roster for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "the namespace to set roster on.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "roster",
          "description" : "the roster node-ids.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/aerospike/principals" : {
      "get" : {
        "tags" : [ "aerospike" ],
        "description" : "Get node-ids of nodes that are principals in this cluster.",
        "operationId" : "principals",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "query",
          "description" : "the cluster-id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "uniqueItems" : true
            }
          }
        }
      }
    },
    "/clusters/{clusterId}" : {
      "get" : {
        "tags" : [ "cluster" ],
        "description" : "Get configuration for a particular cluster.",
        "operationId" : "cluster",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id to get configuration for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/GenericClusterConfig"
            }
          }
        }
      }
    },
    "/clusters/{clusterId}/nodeIds" : {
      "get" : {
        "tags" : [ "cluster" ],
        "description" : "Get node-ids for nodes in cluster.",
        "operationId" : "nodeIds",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id to get node-ids for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/clusters/{clusterId}/appIds" : {
      "get" : {
        "tags" : [ "cluster" ],
        "description" : "Get application specific ids for nodes in cluster.",
        "operationId" : "appIds",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id to get node-ids for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/clusters/{clusterId}/nodes" : {
      "get" : {
        "tags" : [ "cluster" ],
        "description" : "Get nodes in cluster.",
        "operationId" : "nodes",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id to get nodes for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Node"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Launch nodes in  a cluster.",
        "operationId" : "launch",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id to launch nodes in.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "the number of nodes to launch.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Node"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "cluster" ],
        "description" : "Destroy all nodes in a cluster.",
        "operationId" : "destroyNodes",
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/clusters/{clusterId}/scripts" : {
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Run a shell script on all nodes in a cluster.",
        "operationId" : "runScript",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "runAsRoot",
          "in" : "query",
          "description" : "indicates of the script needs to be executed as root user.",
          "required" : true,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "script",
          "description" : "the shell script to run.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/definitions/ExecResponse"
              }
            }
          }
        }
      }
    },
    "/clusters/{clusterId}/services/start" : {
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Start the core service on all nodes in the cluster.",
        "operationId" : "startService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "startParams",
          "description" : "parameters passed to the start script.",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/clusters/{clusterId}/services/stop" : {
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Stop the core service on all nodes in the cluster.",
        "operationId" : "stopService",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/clusters/{clusterId}/services/abort" : {
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Abort the core service on all nodes in the cluster.",
        "operationId" : "abortService",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/clusters/{clusterId}/services/restart" : {
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Restart the core service on all nodes in the cluster.",
        "operationId" : "restartService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "abort",
          "in" : "query",
          "description" : "if true the service will be aborted using the abort script.",
          "required" : true,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "startParams",
          "description" : "the parameters passed to the start scripts.",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/clusters/{clusterId}/images" : {
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Register an image.",
        "operationId" : "registerImage",
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster id to register the image for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "the new image name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "query",
          "description" : "the docker file.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "contextDir",
          "in" : "query",
          "description" : "the docker contextDir directory.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "the new image version.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/clusters/{clusterId}/nodes/parameterized" : {
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Launch nodes in a cluster additionally passing parameters to the launch scripts.",
        "operationId" : "launchParameterized",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id to launch nodes in.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "the number of nodes to launch.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "params",
          "description" : "the parameters passed to start scripts.",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Node"
              }
            }
          }
        }
      }
    },
    "/clusters/images" : {
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Register an image.",
        "operationId" : "registerConfiguredImages",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "clusterIds",
          "description" : "the cluster ids to register images for.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/clusters/{clusterId}/configParams/reset" : {
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Reset persisted configuration parameters for input nodes to the\ncluster config parameters from cirya config file.",
        "operationId" : "resetConfigParams",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the node-ids to stop service on.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/clusters" : {
      "get" : {
        "tags" : [ "cluster" ],
        "description" : "List configured clusters on configuration file order.",
        "operationId" : "clusters",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ClustersConfig"
            }
          }
        }
      }
    },
    "/clusters/ids" : {
      "get" : {
        "tags" : [ "cluster" ],
        "description" : "List configured cluster ids in configuration order.",
        "operationId" : "clusterIds",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/clusters/{clusterId}/translate/appIds" : {
      "post" : {
        "tags" : [ "cluster" ],
        "description" : "Translate application-ids to node-ids",
        "operationId" : "appIdsToNodeIds",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster the nodes belong to.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "appIds",
          "description" : "the input application node-ids.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/clusters/{clusterId}/nodes/detailed" : {
      "get" : {
        "tags" : [ "cluster" ],
        "description" : "Get detailed node information for nodes in the cluster.",
        "operationId" : "nodesDetailed",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clusterId",
          "in" : "path",
          "description" : "the cluster-id to get nodes for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/NodeDetailed"
              }
            }
          }
        }
      }
    },
    "/container-groups/{groupId}/endpoint" : {
      "get" : {
        "tags" : [ "container-group" ],
        "description" : "Get the service endpoint for a container group.",
        "operationId" : "endpoint",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "the container group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/container-groups/{groupId}/images" : {
      "get" : {
        "tags" : [ "container-group" ],
        "description" : "Get registered images for a container group.",
        "operationId" : "images",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "the container group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Image"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "container-group" ],
        "description" : "Register an image.",
        "operationId" : "registerImage",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "the group id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "the new image name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "query",
          "description" : "the docker file.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "contextDir",
          "in" : "query",
          "description" : "the docker contextDir directory.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "the new image version.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/container-groups/{groupId}" : {
      "get" : {
        "tags" : [ "container-group" ],
        "description" : "Get configuration for a container group.",
        "operationId" : "group",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "the container group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ContainerConfigGroup"
            }
          }
        }
      }
    },
    "/container-groups" : {
      "get" : {
        "tags" : [ "container-group" ],
        "description" : "Get configured container groups.",
        "operationId" : "groups",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/definitions/ContainerConfigGroup"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "container-group" ],
        "description" : "Initialize all container groups.",
        "operationId" : "init",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/links/heal" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Heal all network links between source and destination nodes.",
        "operationId" : "linksHeal",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "srcIds",
          "in" : "formData",
          "description" : "the source node-ids.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "destIds",
          "in" : "formData",
          "description" : "the destination node-ids.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/port/block" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Block inbound tcp port on nodes.",
        "operationId" : "blockInboundTcpPort",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "nodeIds",
          "in" : "formData",
          "description" : "the node-ids to block the inbound port on.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "port",
          "in" : "formData",
          "description" : "the port to block.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/port/heal" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Heal inbound tcp port on nodes.",
        "operationId" : "healInboundTcpPort",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "nodeIds",
          "in" : "formData",
          "description" : "the node-ids to block the inbound port on.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "port",
          "in" : "formData",
          "description" : "the port to heal.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/link/tcp/{destPort}/block" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Break tcp connection between a src and destination on a destination port",
        "operationId" : "tcpLinkBreak",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "src",
          "in" : "formData",
          "description" : "the source node-id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "dest",
          "in" : "formData",
          "description" : "the destination node-id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "destPort",
          "in" : "path",
          "description" : "the destination tcp port.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/link/tcp/{destPort}/heal" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Heal tcp connection between a src and destination on a destination port",
        "operationId" : "tcpLinkHeal",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "src",
          "in" : "formData",
          "description" : "the source node-id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "dest",
          "in" : "formData",
          "description" : "the destination node-id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "destPort",
          "in" : "path",
          "description" : "the destination tcp port.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/network-partition/fine-grained/apply" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Network partition nodes using give paritions.",
        "operationId" : "networkPartitionByComponents",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "partition",
          "description" : "a set of sets, where each inner set is one partition or fully\nconnected set of nodes.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "uniqueItems" : true,
              "items" : {
                "type" : "string"
              }
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/network-partition/apply" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Network partition input nodes according to set ratio.",
        "operationId" : "networkPartition",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodesIds",
          "in" : "formData",
          "description" : "the node-ids to partition.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "partitions",
          "in" : "formData",
          "description" : "describes the partition ratio as a ':' separated list of numbers.\nE.g. 1:1:2 partition the nodes into three partitions with 1/4, 1/4 and 1/2 nodes,\n    1:1 partitions the nodes into 2 partitions with 1/2 1/2 nodes,\n    special keyword 'full' partitions nodes such that each node is split away.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "random",
          "in" : "formData",
          "description" : "randomize splits if true else split cluster members by node start times.",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/faults/network-partition/heal" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Heal the network partition.",
        "operationId" : "networkPartitionHeal",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "partition",
          "description" : "a set of sets, where each inner set is one partition or fully\nconnected set of nodes.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "uniqueItems" : true,
              "items" : {
                "type" : "string"
              }
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/pause" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Pause given nodes. Only supported for docker containers.",
        "operationId" : "pauseNodes",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIds",
          "description" : "the node-ids to pause.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/resume" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Resume given nodes. Only supported for docker containers.",
        "operationId" : "resumeNodes",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIds",
          "description" : "the node-ids to pause.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/skew/apply" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Apply clock skew to a set of nodes.",
        "operationId" : "skewApply",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodesIds",
          "in" : "formData",
          "description" : "the node-ids to apply skew on.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "skewSeconds",
          "in" : "formData",
          "description" : "the number of seconds of skew.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "intervalSeconds",
          "in" : "formData",
          "description" : "the interval over which the skew should be\ngradually applied.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "uniform",
          "in" : "formData",
          "description" : "if true the same skew is applied to all nodes.",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/skew/heal" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Undo/heal clock skew on a set of nodes.",
        "operationId" : "skewHeal",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodesIds",
          "in" : "formData",
          "description" : "the node-ids to heal skew on.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/faults/skew/query" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Report skew status for input nodes.",
        "operationId" : "skewInspect",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodesIds",
          "in" : "formData",
          "description" : "the node-ids to query skew for.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/definitions/NodeSkewInfo"
              }
            }
          }
        }
      }
    },
    "/faults/links/break" : {
      "post" : {
        "tags" : [ "fault" ],
        "description" : "Break all network links between source and destination nodes.",
        "operationId" : "linksBreak",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "srcIds",
          "in" : "formData",
          "description" : "the source node-ids.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "destIds",
          "in" : "formData",
          "description" : "the destination node-ids.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/infrastructure/nodes" : {
      "get" : {
        "tags" : [ "infrastructure" ],
        "description" : "Get all infrastructure nodes across pools.",
        "operationId" : "nodes",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Node"
              }
            }
          }
        }
      }
    },
    "/infrastructure/default-pool" : {
      "get" : {
        "tags" : [ "infrastructure" ],
        "description" : "Get the default pool.",
        "operationId" : "defaultPool",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/infrastructure/{poolId}" : {
      "delete" : {
        "tags" : [ "infrastructure" ],
        "description" : "Destroy nodes in a pool.",
        "operationId" : "destroyNodesInPool",
        "parameters" : [ {
          "name" : "poolId",
          "in" : "path",
          "description" : "the pool-id to destroy nodes in.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/infrastructure/{poolId}/nodes" : {
      "get" : {
        "tags" : [ "infrastructure" ],
        "description" : "Get infrastructure Nodes for a give pool.",
        "operationId" : "nodesInPool",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "poolId",
          "in" : "path",
          "description" : "the pool id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Node"
              }
            }
          }
        }
      }
    },
    "/infrastructure/pools" : {
      "get" : {
        "tags" : [ "infrastructure" ],
        "description" : "Get list all infrastructure pools.",
        "operationId" : "pools",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/infrastructure/nodes-ids" : {
      "get" : {
        "tags" : [ "infrastructure" ],
        "description" : "Get all infrastructure node-ids across all pools.",
        "operationId" : "nodesIds",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/nodes/{nodeId}" : {
      "get" : {
        "tags" : [ "node" ],
        "description" : "Get details for a particular node.",
        "operationId" : "node",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeId",
          "in" : "path",
          "description" : "the node-id of the node to be queried.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/Node"
            }
          }
        }
      }
    },
    "/nodes/appIds" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Get application specific ids for nodes.",
        "operationId" : "appIds",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIds",
          "description" : "node-ids to get application ids for.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/nodes" : {
      "get" : {
        "tags" : [ "node" ],
        "description" : "Get launched nodes across all clusters.",
        "operationId" : "nodes",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Node"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "node" ],
        "description" : "Destroy given nodes.",
        "operationId" : "destroyNodes",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIds",
          "description" : "the node-ids to destroy.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/{nodeId}/scripts" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Run a shell script on the given node.",
        "operationId" : "runScriptOnNode",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeId",
          "in" : "path",
          "description" : "the node-id to run script on.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "runAsRoot",
          "in" : "query",
          "description" : "indicates if the script should be run as root user.",
          "required" : true,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "script",
          "description" : "the shell script to run.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ExecResponse"
            }
          }
        }
      }
    },
    "/nodes/scripts" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Run a shell script on a collection of nodes.",
        "operationId" : "runScript",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeIds",
          "in" : "formData",
          "description" : "the node-ids to run script on.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "runAsRoot",
          "in" : "formData",
          "description" : "indicates if the script should be run as root user.",
          "required" : true,
          "type" : "boolean"
        }, {
          "name" : "script",
          "in" : "formData",
          "description" : "the shell script to run.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/definitions/ExecResponse"
              }
            }
          }
        }
      }
    },
    "/nodes/service/status" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Get status of core service on given nodes.",
        "operationId" : "serviceStatus",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeIds",
          "in" : "formData",
          "description" : "the node-ids to get status for.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "boolean"
              }
            }
          }
        }
      }
    },
    "/nodes/service/start" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Start the core service on given nodes.",
        "operationId" : "startService",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeIds",
          "in" : "formData",
          "description" : "the node-ids to start service on.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/service/start/parameterized" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Start the core service on given nodes.",
        "operationId" : "startServiceParameterized",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIdsWithParams",
          "description" : "the params and node-ids to start service on.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeIdsWithParams"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/service/stop" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Stop the core service on given nodes.",
        "operationId" : "stopService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIds",
          "description" : "the node-ids to stop service on.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/service/abort" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Abort the core service on given nodes.",
        "operationId" : "abortService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIds",
          "description" : "the node-ids to abort the service on.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/service/restart" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Restart the core service on given nodes.",
        "operationId" : "restartService",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeIds",
          "in" : "formData",
          "description" : "the node-ids to start service on.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "abort",
          "in" : "formData",
          "description" : "true to restart by aborting the service.",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/service/restart/parameterized" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Restart the core service on given nodes.",
        "operationId" : "restartServiceParameterized",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIdsWithParams",
          "description" : "the params and node-ids to start service on.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeIdsWithParams"
          }
        }, {
          "name" : "abort",
          "in" : "query",
          "description" : "true to restart by aborting the service.",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/service/reconfigure" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Reconfigure the core service on given nodes by regenerating the configuration and templates.",
        "operationId" : "reconfigureService",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeIds",
          "in" : "formData",
          "description" : "the node-ids to reconfigure service on.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "abort",
          "in" : "formData",
          "description" : "true to reconfigure by aborting the service.",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/service/reconfigure/parameterized" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Reconfigure the core service on given nodes by regenerating the templates.",
        "operationId" : "reconfigureServiceParameterized",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIdsWithParams",
          "description" : "the params and node-ids to reconfigure service on.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeIdsWithParams"
          }
        }, {
          "name" : "abort",
          "in" : "query",
          "description" : "true to reconfigure by aborting the service.",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/service/reinstall" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Reinstall the core service on given nodes by regenerating the templates.",
        "operationId" : "reinstallService",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeIds",
          "in" : "formData",
          "description" : "the node-ids to reconfigure service on.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "archivePath",
          "in" : "formData",
          "description" : "the new archive path for re-installation, if null cluster configured archivePath will be used.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "abort",
          "in" : "formData",
          "description" : "true to reconfigure by aborting the service.",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/service/reinstall/parameterized" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Reconfigure the core service on given nodes by regenerating the templates.",
        "operationId" : "reinstallServiceParameterized",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIdsWithParams",
          "description" : "the params and node-ids to re-install service on.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeIdsWithParams"
          }
        }, {
          "name" : "archivePath",
          "in" : "query",
          "description" : "the new archive path for re-installation, if null cluster configured archivePath will be used.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "abort",
          "in" : "query",
          "description" : "true to re-install by aborting the service.",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/query" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Convert node-ids to Nodes.",
        "operationId" : "nodesByIds",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeIds",
          "in" : "formData",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/definitions/Node"
              }
            }
          }
        }
      }
    },
    "/nodes/{nodeId}/files" : {
      "get" : {
        "tags" : [ "node" ],
        "description" : "Get a file from a node to a local destination.",
        "operationId" : "getFile",
        "parameters" : [ {
          "name" : "nodeId",
          "in" : "path",
          "description" : "the node-id to get file from.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "src",
          "in" : "query",
          "description" : "the path of file on the node.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "dest",
          "in" : "query",
          "description" : "the local destination path to save the contents to.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "post" : {
        "tags" : [ "node" ],
        "description" : "Put a local file to a node.",
        "operationId" : "putFile",
        "parameters" : [ {
          "name" : "nodeId",
          "in" : "path",
          "description" : "the node-id to put the file to.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "src",
          "in" : "query",
          "description" : "the local path of the source file.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "dest",
          "in" : "query",
          "description" : "the remote node's destination path to put the file to.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/nodes/ports/{port}" : {
      "get" : {
        "tags" : [ "node" ],
        "description" : "Get the public endpoint for a port on a nodes. Will always return a non-null mapping.",
        "operationId" : "publicEndpoints",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIds",
          "description" : "the node-ids to get public endpoints for.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "port",
          "in" : "path",
          "description" : "the private port to get the public mapping for.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/definitions/Endpoint"
              }
            }
          }
        }
      }
    },
    "/nodes/{nodeId}/ports/{port}" : {
      "get" : {
        "tags" : [ "node" ],
        "description" : "Get the public endpoint for a port on a node. * Get the public endpoint for a port on a nodes. Will always return a non-null mapping.",
        "operationId" : "publicEndpointForNode",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeId",
          "in" : "path",
          "description" : "the node-id to query port mapping for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "port",
          "in" : "path",
          "description" : "the private port to get the mapping for.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/Endpoint"
            }
          }
        }
      }
    },
    "/nodes/configParams/reset" : {
      "post" : {
        "tags" : [ "node" ],
        "description" : "Reset persisted configuration parameters for input nodes to the\ncluster config parameters from cirya config file.",
        "operationId" : "resetConfigParams",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nodeIds",
          "description" : "the node-ids to stop service on.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/server/stop" : {
      "delete" : {
        "tags" : [ "server" ],
        "description" : "Stop the server.",
        "operationId" : "stop",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/server/version" : {
      "get" : {
        "tags" : [ "server" ],
        "description" : "Get the server version.",
        "operationId" : "version",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/CiryaServerVersion"
            }
          }
        }
      }
    },
    "/sessions" : {
      "get" : {
        "tags" : [ "session" ],
        "description" : "List ongoing sessions.",
        "operationId" : "sessions",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "uniqueItems" : true
            }
          }
        }
      },
      "post" : {
        "tags" : [ "session" ],
        "description" : "Start a new session.",
        "operationId" : "begin",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "ciryaConfigFile",
          "description" : "the cirya configuration file to use for this session.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "session" ],
        "description" : "End currently active session.",
        "operationId" : "end",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    }
  },
  "definitions" : {
    "GenericClusterConfig" : {
      "type" : "object",
      "properties" : {
        "group" : {
          "type" : "string"
        },
        "archivePath" : {
          "type" : "string"
        },
        "downloadScript" : {
          "type" : "string"
        },
        "downloadUserName" : {
          "type" : "string"
        },
        "downloadUserPassword" : {
          "type" : "string"
        },
        "installScript" : {
          "type" : "string"
        },
        "startScript" : {
          "type" : "string"
        },
        "stopScript" : {
          "type" : "string"
        },
        "abortScript" : {
          "type" : "string"
        },
        "isRunningScript" : {
          "type" : "string"
        },
        "cleanupScript" : {
          "type" : "string"
        },
        "paramsProvider" : {
          "type" : "string"
        },
        "appIdScript" : {
          "type" : "string"
        },
        "copyFiles" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "templates" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "params" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "env" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "ExecResponse" : {
      "type" : "object",
      "properties" : {
        "output" : {
          "type" : "string"
        },
        "error" : {
          "type" : "string"
        },
        "exitStatus" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "Credentials" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "privateKeyFile" : {
          "type" : "string"
        }
      }
    },
    "Endpoint" : {
      "type" : "object",
      "properties" : {
        "host" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "Hardware" : {
      "type" : "object",
      "properties" : {
        "deprecated" : {
          "type" : "boolean"
        },
        "processors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Processor"
          }
        },
        "ram" : {
          "type" : "integer",
          "format" : "int32"
        },
        "volumes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Volume"
          }
        },
        "hypervisor" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "providerId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "NODE", "IMAGE", "HARDWARE", "SECURITYGROUP" ]
        },
        "uri" : {
          "type" : "string",
          "format" : "uri"
        },
        "userMetadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "location" : {
          "$ref" : "#/definitions/Location"
        }
      }
    },
    "Location" : {
      "type" : "object",
      "properties" : {
        "scope" : {
          "type" : "string",
          "enum" : [ "PROVIDER", "REGION", "ZONE", "SYSTEM", "NETWORK", "HOST" ]
        },
        "description" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "iso3166Codes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "parent" : {
          "$ref" : "#/definitions/Location"
        },
        "id" : {
          "type" : "string"
        }
      }
    },
    "Node" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "hostName" : {
          "type" : "string"
        },
        "domainName" : {
          "type" : "string"
        },
        "cluster" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "PENDING", "TERMINATED", "SUSPENDED", "RUNNING", "ERROR", "UNRECOGNIZED" ]
        },
        "startTime" : {
          "type" : "string"
        },
        "hardware" : {
          "$ref" : "#/definitions/Hardware"
        },
        "imageId" : {
          "type" : "string"
        },
        "operatingSystem" : {
          "$ref" : "#/definitions/OperatingSystem"
        },
        "loginPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "loginCredentials" : {
          "$ref" : "#/definitions/Credentials"
        },
        "publicAddresses" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "privateAddresses" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "portMapping" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Endpoint"
          }
        },
        "container" : {
          "type" : "boolean"
        }
      }
    },
    "OperatingSystem" : {
      "type" : "object",
      "properties" : {
        "family" : {
          "type" : "string",
          "enum" : [ "UNRECOGNIZED", "AIX", "ARCH", "CENTOS", "DARWIN", "DEBIAN", "ESX", "FEDORA", "FREEBSD", "GENTOO", "HPUX", "LINUX", "COREOS", "SMARTOS", "AMZN_LINUX", "MANDRIVA", "NETBSD", "OEL", "OPENBSD", "RHEL", "SCIENTIFIC", "GCEL", "SIGAR", "SLACKWARE", "SOLARIS", "SUSE", "TURBOLINUX", "CLOUD_LINUX", "UBUNTU", "WINDOWS" ]
        },
        "name" : {
          "type" : "string"
        },
        "arch" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "is64Bit" : {
          "type" : "boolean"
        }
      }
    },
    "Processor" : {
      "type" : "object",
      "properties" : {
        "cores" : {
          "type" : "number",
          "format" : "double"
        },
        "speed" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "Volume" : {
      "type" : "object",
      "properties" : {
        "device" : {
          "type" : "string"
        },
        "bootDevice" : {
          "type" : "boolean"
        },
        "durable" : {
          "type" : "boolean"
        },
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "LOCAL", "NAS", "SAN" ]
        },
        "size" : {
          "type" : "number",
          "format" : "float"
        }
      }
    },
    "ClustersConfig" : {
      "type" : "object",
      "properties" : {
        "clusters" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/GenericClusterConfig"
          }
        }
      }
    },
    "NodeDetailed" : {
      "type" : "object",
      "properties" : {
        "node" : {
          "$ref" : "#/definitions/Node"
        },
        "serviceId" : {
          "type" : "string"
        },
        "serviceRunning" : {
          "type" : "boolean"
        }
      }
    },
    "Image" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ContainerConfigGroup" : {
      "type" : "object",
      "properties" : {
        "image" : {
          "type" : "string"
        },
        "imageFile" : {
          "type" : "string"
        },
        "mount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "networkName" : {
          "type" : "string"
        },
        "networkSubnet" : {
          "type" : "string"
        },
        "overlayNetwork" : {
          "type" : "boolean"
        },
        "publicPorts" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "rootUser" : {
          "type" : "string"
        },
        "rootUserPassword" : {
          "type" : "string"
        },
        "authenticateSudo" : {
          "type" : "boolean"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "CONTAINER", "RAW" ]
        },
        "pool" : {
          "type" : "string"
        },
        "sshAble" : {
          "type" : "boolean"
        }
      }
    },
    "ClockSkewFaultState" : {
      "type" : "object",
      "properties" : {
        "appliedSkewSeconds" : {
          "type" : "integer",
          "format" : "int32"
        },
        "endTimeNanos" : {
          "type" : "integer",
          "format" : "int64"
        },
        "skewInterval" : {
          "type" : "integer",
          "format" : "int32"
        },
        "skewSeconds" : {
          "type" : "integer",
          "format" : "int32"
        },
        "startTimeNanos" : {
          "type" : "integer",
          "format" : "int64"
        },
        "startTime" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "NodeSkewInfo" : {
      "type" : "object",
      "properties" : {
        "faultsState" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClockSkewFaultState"
          }
        },
        "currentSkew" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "NodeIdsWithParams" : {
      "type" : "object",
      "properties" : {
        "nodeIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "params" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "CiryaServerVersion" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "apiPath" : {
          "type" : "string"
        },
        "revision" : {
          "type" : "string"
        },
        "buildTime" : {
          "type" : "string"
        }
      }
    }
  }
}