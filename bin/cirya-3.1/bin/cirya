#!/usr/bin/env sh

##############################################################################
##
##  cirya start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/.." >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="cirya"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and CIRYA_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Dgreeting.language=en"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/lib/aerospike-cirya-cli-3.1.jar:$APP_HOME/lib/aerospike-cirya-client-3.1-SNAPSHOT.jar:$APP_HOME/lib/swagger:$APP_HOME/lib/swagger:$APP_HOME/lib/swagger:$APP_HOME/lib/guice-assistedinject-4.1.0.jar:$APP_HOME/lib/guice-multibindings-4.1.0.jar:$APP_HOME/lib/guice-4.1.0.jar:$APP_HOME/lib/commons-lang3-3.0.1.jar:$APP_HOME/lib/logback-classic-1.0.13.jar:$APP_HOME/lib/kotlin-logging-1.6.10.jar:$APP_HOME/lib/slf4j-api-1.7.25.jar:$APP_HOME/lib/javax.annotation-api-1.3.1.jar:$APP_HOME/lib/kotlin-stdlib-jdk8-1.3.31.jar:$APP_HOME/lib/picocli-3.1.0.jar:$APP_HOME/lib/commons-io-2.6.jar:$APP_HOME/lib/nailgun-all-0.9.3-SNAPSHOT.jar:$APP_HOME/lib/logback-core-1.0.13.jar:$APP_HOME/lib/javax.inject-1.jar:$APP_HOME/lib/aopalliance-1.0.jar:$APP_HOME/lib/guava-19.0.jar:$APP_HOME/lib/kotlin-stdlib-jdk7-1.3.31.jar:$APP_HOME/lib/kotlin-stdlib-1.3.31.jar:$APP_HOME/lib/jersey-client-2.29.jar:$APP_HOME/lib/jersey-media-multipart-2.29.jar:$APP_HOME/lib/jersey-media-json-jackson-2.29.jar:$APP_HOME/lib/jersey-hk2-2.29.jar:$APP_HOME/lib/jackson-datatype-joda-2.1.5.jar:$APP_HOME/lib/jackson-datatype-jsr310-2.9.6.jar:$APP_HOME/lib/jackson-module-jaxb-annotations-2.9.9.jar:$APP_HOME/lib/jackson-databind-2.9.9.jar:$APP_HOME/lib/jackson-core-2.9.9.jar:$APP_HOME/lib/jackson-annotations-2.9.9.jar:$APP_HOME/lib/javax.activation-1.2.0.jar:$APP_HOME/lib/kotlin-logging-common-1.6.10.jar:$APP_HOME/lib/kotlin-stdlib-common-1.3.31.jar:$APP_HOME/lib/annotations-13.0.jar:$APP_HOME/lib/jersey-common-2.29.jar:$APP_HOME/lib/jersey-entity-filtering-2.29.jar:$APP_HOME/lib/jakarta.ws.rs-api-2.1.5.jar:$APP_HOME/lib/hk2-locator-2.5.0.jar:$APP_HOME/lib/hk2-api-2.5.0.jar:$APP_HOME/lib/hk2-utils-2.5.0.jar:$APP_HOME/lib/jakarta.inject-2.5.0.jar:$APP_HOME/lib/mimepull-1.9.11.jar:$APP_HOME/lib/joda-time-2.1.jar:$APP_HOME/lib/jakarta.annotation-api-1.3.4.jar:$APP_HOME/lib/osgi-resource-locator-1.0.3.jar:$APP_HOME/lib/aopalliance-repackaged-2.5.0.jar:$APP_HOME/lib/javassist-3.22.0-CR2.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
for s in "${@}" ; do
    s=$(printf "%s" "$s" | sed -e 's/"/\\"/g')
    s="\""$s"\""
    APP_ARGS=$APP_ARGS" "$s
done


# Collect JVM options
JVM_OPTS="$DEFAULT_JVM_OPTS $JAVA_OPTS $CIRYA_OPTS -Djava.util.concurrent.ForkJoinPool.common.parallelism=1024 -Djava.security.egd=file:/dev/./urandom -Dpicocli.ansi=tru"

# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
  cd "$(dirname "$0")"
fi

# Nailgun server could run in a different directory. Append working directory to the command line, so that cirya resolves relative file paths correctly.
APP_ARGS="-w \"$SAVED\" "$APP_ARGS

if [ -n "${CIRYA_PORT}" ]; then
  APP_ARGS="-p $CIRYA_PORT "$APP_ARGS
fi

if $darwin; then
    NG_CLIENT="$APP_HOME/bin/mac/ng"
else
    NG_CLIENT="$APP_HOME/bin/ng"
    $NG_CLIENT > /dev/null 2>&1
    if [ "$?" = "1" ]; then
       # Most likely an issue with glibc.
       NG_CLIENT="$APP_HOME/bin/legacy/ng"
    fi
fi

probeOut=$(eval "$NG_CLIENT" com.aerospike.cirya.cli.CiryaCliInteractiveCheckKt "$APP_ARGS" 2> /dev/null)
NG_STATUS=$?
interactive=$(echo $probeOut | sed -e 's/,.*//g')
needsRestart=$(echo $probeOut | sed -e 's/.*,//g')

if [ "$needsRestart" = "true" ];then
  (>&2 echo "Restarting cirya ...")
  kill -9 $(ps -aef | grep NGServer | grep -i cirya | grep -v grep | sed -e 's/^ *//g' | sed -e 's/  */@/g' |cut -f 2 -d "@") 2> /dev/null || true
  kill -9 $(ps -aef | grep "CiryaHttpServer" | grep -v grep | sed -e 's/^ *//g' | sed -e 's/  */@/g' |cut -f 2 -d "@")  2> /dev/null || true
  NG_STATUS=230
fi

until [ $NG_STATUS -ne 230 ]; do
  NG_ARGS="1200000"
  # Start nailgun server
  eval nohup "$JAVACMD" "$JVM_OPTS" -classpath "\"$CLASSPATH\"" com.martiansoftware.nailgun.NGServer ":2113" $NG_ARGS> /dev/null 2>&1 &
  sleep 1
  probeOut=$(eval "$NG_CLIENT" com.aerospike.cirya.cli.CiryaCliInteractiveCheckKt "$APP_ARGS" 2> /dev/null)
  NG_STATUS=$?
  interactive=$(echo $probeOut | sed -e 's/,.*//g')
  needsRestart=$(echo $probeOut | sed -e 's/.*,//g')
done


if [ "$interactive" = "interactive" ]; then
    if $darwin; then
        TMP=$(mktemp -t cirya)
    else
        TMP=$(mktemp)
    fi

	launchCommand=$(eval "$NG_CLIENT" com.aerospike.cirya.cli.CiryaCliKt "$APP_ARGS" 2> "$TMP")
	exitStatus=$?
	if [ "$exitStatus" = "0" ]; then
		cat "$TMP" >&2
		launchCommand=$(echo "$launchCommand" | tail -1)
		eval $launchCommand
	else
		cat "$TMP" >&2
	fi
	rm -f "$TMP"
else
	eval "$NG_CLIENT" com.aerospike.cirya.cli.CiryaCliKt "$APP_ARGS"
	exitStatus=$?
fi

exit $exitStatus
